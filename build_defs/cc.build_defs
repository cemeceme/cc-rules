
"""Rules to build C and C++ targets.

Note that the C / C++ build process is complex with many options; we attempt to keep things
as high-level as possible here but expose flags to tune things as needed.

As a general note, most of the rules work by attaching labels indicating various flags etc which
later rules need to know about. These get picked up by later rules to adjust commands; this way
you can write a cc_library rule specifying e.g. linker_flags = ['-lz'] and not have to re-specify
that on every single cc_binary / cc_test that transitively depends on that library.
"""

def _buildTUCommand(name:str):
    """
    Generates the command for a translation unit as a pre-build call.
    """
    labels = get_labels(name, "")

    defines = []
    includes = []
    for label in labels:
        if(not label.startswith("cc:")):
            continue # Skip labels not meant for cc rules.

        # Strip prefix.
        remaining = label[3:]

        # Add label to corresponding list.
        if(remaining.startswith("inc:")):
            includes += [remaining[4:]]

        if(remaining.startswith("def:")):
            defines += [remaining[4:]]

    
    # Set up command.
    cmd = ["\"$TOOLS_CC\"", "-c", "-o", "\"$OUT\""] # Gcc in compile only mode. TODO is "-s" needed?

    cmd += ["-I."] # Include paths.
    for include in includes:
        cmd += ["-I" + include]

    # Defines.
    for define in defines:
        cmd += ["-D" + define]

    cmd += ["${SRCS_SRCS}"] # Source files.
    cmd += ["-std=c++20"] # C++ standard to use.

    # Error flags.
    cmd += [
        "-Werror", "-Werror=suggest-override", "-Werror=return-type", "-Werror=non-virtual-dtor", "-Werror=catch-value", "-Wno-unused-variable", 
        "-Wno-reorder", "-Wno-sign-compare", "-Wno-stringop-overflow"
    ]
    cmd += ["-lpthread", "-O3", "-fmax-errors=5"] # Optimisations, thread support and max errors.
    cmd += ["-fPIC"] # Position independent code.
    # cmd += ["-isystem", "."] # System Include paths.

    set_command(name, "opt", " ".join(cmd))


def _generateTURule(name:str, src:str, out:str=None, hdrs:list=[], deps:list=[], flags:list=[], labels:list=[]):
    """
    Generates a translation unit for the given source.
    """
    if(looks_like_build_label(src)):
        log.fatal("Given source: '" + src + "' is a build label. Must be a file.")

    suffix = src.replace('/', '_').replace('.', '_').replace(':', '_').replace('|', '_')
    if(not out):
        out = suffix + ".o"

    ruleName = tag(name, suffix)


    # Tool definitions.
    tools = {
        "cc": ["g++"],
    }

    srcRule = build_rule(
        name=ruleName,
        outs=[out],
        optional_outs=['*.gcno'],
        deps=deps,
        srcs={'srcs': [src], 'hdrs': hdrs},
        # cmd=" ".join(cmd),
        cmd="",
        pre_build=_buildTUCommand,
        building_description='Compiling... ',
        binary=False,
        needs_transitive_deps=True,
        requires=["cc_hdrs", "test"],
        # labels=labels,
        tools=tools
    )
    return(srcRule)

def _getBuildLinkCommand(sharedLib:bool):
    def _buildLinkCommand(name:str):
        """
        Generates the command for a link step as a pre-build call.
        """

        # Binary
        # $TOOLS_CC" -o "$OUT" -Wl,--start-group `find . -name "*.o" -or -name "*.a" | sort` -Wl,--end-group 
        # -Wl,-L.,-lnodeGraph -Wl,-LnodeGraphRenderers/qtWidgetRenderer,-lqtWidgetRenderer -Wl,-lmysql-connector-cpp -Wl,-rpath,'$ORIGIN/subrepos/nodeGraph' -Wl,-rpath,'$ORIGIN/subrepos/nodeGraph/nodeGraphRenderers/qtWidgetRenderer' -Wl,-rpath,'$ORIGIN/subrepos/mysql-connector-cpp' -Wl,-lpthread,-ldl -Wl,--build-id=none -std=c++20 -Werror -Werror=suggest-override -Werror=return-type -Werror=non-virtual-dtor -Werror=catch-value -Wno-unused-variable -Wno-reorder -Wno-sign-compare -Wno-stringop-overflow -lpthread -s -O3 -fmax-errors=5  -Wl,-lpthread,-ldl 
        # -Wl,/usr/lib64/libQt6Charts.so -Wl,/usr/lib64/libQt6Core.so -Wl,/usr/lib64/libQt6Gui.so -Wl,/usr/lib64/libQt6Widgets.so

        # Shared object.
        # "$TOOLS_CC" -o "$OUT" -shared -Wl,--whole-archive -Wl,--start-group `find . -name "*.o" -or -name "*.a" | sort` -Wl,--end-group -Wl,--no-whole-archive 
        # -Wl,-lpthread,-ldl -Wl,--build-id=none -std=c++20 -Werror -Werror=suggest-override -Werror=return-type -Werror=non-virtual-dtor -Werror=catch-value -Wno-unused-variable -Wno-reorder -Wno-sign-compare -Wno-stringop-overflow -lpthread -s -O3 -fmax-errors=5  -Wl,-lpthread,-ldl


        labels = get_labels(name, "")

        includes = []
        libraries = []
        flags = []
        for label in labels:
            if(not label.startswith("cc:")):
                continue # Skip labels not meant for cc rules.

            # Strip prefix.
            remaining = label[3:]

            # Add label to corresponding list.
            if(remaining.startswith("inc:")):
                includes += [remaining[4:]]
            
            if(remaining.startswith("lib:")):
                libraries += [remaining[4:]]
            
            if(remaining.startswith("ld:")):
                flags += [remaining[3:].replace(" ", ",")]

        cmd = ["$TOOLS_CC", "-o", "\"$OUT\""]
        if(sharedLib):
            cmd += ["-shared", "-Wl,--whole-archive"]
        cmd += ["-Wl,--start-group", "`find . -name \"*.o\" -or -name \"*.a\" | sort`", "-Wl,--end-group"]
        if(sharedLib):
            cmd += ["-Wl,--no-whole-archive"]


        # Add library paths.
        includeCmd = []
        for library in libraries:
            directory, fileName = split_path(library)
            includeCmd += ["-L" + directory, "-l" + fileName]

        if(len(includeCmd) > 0):
            cmd += [",".join(["-Wl"]+ includeCmd)] # Include paths.

        # cmd += ["-std=c++20"] # C++ standard to use.
        cmd += ["-Wl,--build-id=none"] # Disable build ID.

        # Error flags.
        # cmd += [
        #     "-Werror", "-Werror=suggest-override", "-Werror=return-type", "-Werror=non-virtual-dtor", "-Werror=catch-value", "-Wno-unused-variable", 
        #     "-Wno-reorder", "-Wno-sign-compare", "-Wno-stringop-overflow"
        # ]
        if(len(flags) > 0):
            cmd += [",".join(["-Wl"] + flags)]

        cmd += ["-lpthread", "-O3", "-fmax-errors=5"] # Optimisations, thread support and max errors.

        set_command(name, "opt", " ".join(cmd))

    return(_buildLinkCommand)

def _generateArchiveRule(name: str, out:str, srcs:list=[],pre_build:function = None):
    """
    Generates an archive step for archiving multiple object or archive files into one file.
    """

    # Tool definitions.
    tools = {
        "ar": ["ar"],
    }

    archiveRule = build_rule(
        name=name,
        outs=[out],
        srcs=srcs,
        cmd="\"$TOOLS_AR\" rcs \"$OUT\" `find . -name \"*.o\" | sort`",
        building_description='Archiving...',
        binary=False,
        pre_build=pre_build,
        tools = tools
    )

    return(archiveRule)

def _generateLinkRule(name:str, out:str, deps:list=[], flags:list=[], labels:list=[], sharedLib:bool=False):
    """
    Generates a link step for dependencies.
    """
    # Tool definitions.
    tools = {
        'cc': ["g++"]
    }

    labels += ["cc:ld:" + flag for flag in flags]
    log.info("Linker flags given: " + str(["cc:ld:" + flag for flag in flags]))
    requires = ["cc", "test"]

    linkRule = build_rule(
        name=name,
        outs=[out],
        optional_outs=['*.gcno'],
        deps=deps,
        # cmd=" ".join(cmd),
        cmd="",
        pre_build=_getBuildLinkCommand(sharedLib=sharedLib),
        building_description='Linking... ',
        binary=True,
        # needs_transitive_deps=True,
        requires=requires,
        labels=labels,
        tools=tools,
    )
    return(linkRule)

def _getExpandSrcsPreBuild(name:str, srcs:list=[], hdrs:list=[], deps:list=[], flags:list=[]):
    def _ExpandSrcsPreBuild(callerName:str):
    """
    Expands build label sources in a pre build and adds them as the dependency to this rule.
    """
        for label in srcs:
            if(not looks_like_build_label(label)):
                log.fatal("Given source: '" + label + "' is a file. Must be a build label.")

            for src in get_outs(label):
                # Generate build rule for each source.
                srcRule = _generateTURule(name=name, src=src, hdrs=hdrs, deps=deps, flags=flags)

                add_dep(callerName, srcRule)
    return(_ExpandSrcsPreBuild)



def cc_library(name:str, srcs:list=[], hdrs:list=[], private_hdrs:list=[], deps:list=[], out:str='', optional_outs:list=[],
               visibility:list=None, test_only:bool&testonly=False, compiler_flags:list&cflags&copts=[],
               linker_flags:list&ldflags&linkopts=[], pkg_config_libs:list=[], pkg_config_cflags:list=[], includes:list=[],
               defines:list|dict=[], alwayslink:bool=False, linkstatic:bool=False, _c=False,
               textual_hdrs:list=[], _module:bool=False, _interfaces:list=[], labels:list=[]):
    """Generate a C++ library target.

    Args:
      name (str): Name of the rule
      srcs (list): C++ source files to compile.
      hdrs (list): Header files. These will be made available to dependent rules, so the distinction
                   between srcs and hdrs is important.
      private_hdrs (list): Header files that are available only to this rule and not exported to
                           dependent rules.
      deps (list): Dependent rules.
      out (str): Name of the output library. Defaults to lib<name>.a (or just <name>.a if name already
                       begins with 'lib').
      optional_outs (list): Name of optional outputs.
      visibility (list): Visibility declaration for this rule.
      test_only (bool): If True, is only available to other test rules.
      compiler_flags (list|dict): Flags to pass to the compiler. Optionally may be a dict, where the key is the specific compiler target.
      linker_flags (list|dict): Flags to pass to the linker; these will not be used here but will be
                           picked up by a cc_binary or cc_test rule. Optionally may be a dict, where the key is the specific compiler target.
      pkg_config_libs (list): Libraries to declare a dependency on using `pkg-config --libs`. Again, the ldflags
                              will be picked up by cc_binary or cc_test rules.
      pkg_config_cflags (list): Libraries to declare a dependency on using `pkg-config --cflags`. Again, the ldflags
                              will be picked up by cc_binary or cc_test rules.
      includes (list): List of include directories to be added to the compiler's path.
      defines (list | dict): List of tokens to define in the preprocessor.
                             Alternatively can be a dict of name -> value to define, in which case
                             values are surrounded by quotes.
      alwayslink (bool): If True, any binaries / tests using this library will link in all symbols,
                         even if they don't directly reference them. This is useful for e.g. having
                         static members that register themselves at construction time.
      linkstatic (bool): Only provided for Bazel compatibility. Has no actual effect.
      textual_hdrs (list): Also provided for Bazel compatibility. Effectively works the same as hdrs for now.
      labels (list): Labels to attach to this rule.
    """

    pkg_name = package_name()
    # Create labels.
    labels = (["cc:ld:" + flag for flag in linker_flags] +
              ["cc:pc:" + lib for lib in pkg_config_libs] +
              ["cc:pcc:" + cflag for cflag in pkg_config_cflags] +
              ["cc:inc:" + join_path(pkg_name, include) for include in includes] +
              ["cc:def:" + define for define in defines] +
              labels)

    # A set of rules for sources that are not build labels.
    srcRules = []
    # A set of sources that are build labels, and will need to be expanded in a pre-build step.
    buildLabelSrcRules = []

    for src in srcs:
        if(looks_like_build_label(src)):
            buildLabelSrcRules += [src]
        else:
            srcRules += [_generateTURule(name=name, src=src, hdrs=hdrs + private_hdrs, deps=deps, flags=compiler_flags, labels=labels)]


    # Generate a rule for public headers and add them to the provided labels so that other rules can access them.
    headerRule = filegroup(
        name = tag(name, "hdrs"),
        srcs=hdrs,
        deps=deps,
        test_only=test_only,
        labels=labels,
        requires = ["cc_hdrs", "cc_mod"],
        output_is_complete = False,
    )

    # Define out name if not defined.
    if not out:
        out = f'{name}.a' if name.startswith('lib') else f'lib{name}.a'

    archiveRule = _generateArchiveRule(
        name=tag(name,"a"),
        out=out,
        srcs=srcRules,
        pre_build=_getExpandSrcsPreBuild(name=name, srcs=buildLabelSrcRules,hdrs=hdrs+private_hdrs, deps=deps, flags=compiler_flags)
    )
    
    provides = {
        "cc": archiveRule,
        "cc_hdrs": headerRule
    }

    # Generate a wrapper rule, to pass in arguments.
    libRule = filegroup(
        name=name,
        srcs=[archiveRule],
        provides=provides,
        labels=labels,
        test_only=test_only,
        visibility=visibility,
        output_is_complete=True
    )
    return(libRule)


def cc_object(name:str, src:str, hdrs:list=[], private_hdrs:list=[], out:str=None, optional_outs:list=[], test_only:bool&testonly=False,
              compiler_flags:list&cflags&copts=[], linker_flags:list&ldflags&linkopts=[], pkg_config_libs:list=[], pkg_config_cflags:list=[],
              includes:list=[], defines:list|dict=[], alwayslink:bool=False, _c=False, visibility:list=None, deps:list=[], labels:list=[]):
    """Generate a C or C++ object file from a single source.

    N.B. This is fairly low-level; for most use cases cc_library should be preferred.

    Args:
      name (str): Name of the rule
      src (str): C or C++ source file to compile. This can be another rule, but if so it must
                 have exactly one output.
      hdrs (list): Header files. These will be made available to dependent rules, so the distinction
                   between srcs and hdrs is important.
      private_hdrs (list): Header files that are available only to this rule and not exported to
                           dependent rules.
      out (str): Name of the output file. Defaults to name + .o.
      optional_outs (list): Name of optional outputs.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      test_only (bool): If True, is only available to other test rules.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker; these will not be used here but will be
                           picked up by a cc_binary or cc_test rule.
      pkg_config_libs (list): Libraries to declare a dependency on using `pkg-config --libs`. Again, the ldflags
                              will be picked up by cc_binary or cc_test rules.
      pkg_config_cflags (list): Libraries to declare a dependency on using `pkg-config --cflags`. Again, the ldflags
                              will be picked up by cc_binary or cc_test rules.
      includes (list): List of include directories to be added to the compiler's path.
      defines (list | dict): List of tokens to define in the preprocessor.
                             Alternatively can be a dict of name -> value to define, in which case
                             values are surrounded by quotes.
      alwayslink (bool): If True, any binaries / tests using this library will link in all symbols,
                         even if they don't directly reference them. This is useful for e.g. having
                         static members that register themselves at construction time.
      labels (list): Labels to attach to this rule.
    """

    TURule = _generateTURule(name=name, src=src, out=out, hdrs=hdrs + private_hdrs, deps=deps, flags=compiler_flags)

    # Seperate file rule to package the object rule with passed in flags.
    fileRule = filegroup(
        name=name,
        srcs=[TURule],
        test_only=test_only,
        visibility=visibility,
        labels=labels,
        binary=False,
        output_is_complete=True,
    )
    return(fileRule)

def cc_static_library(name:str, srcs:list=[], hdrs:list=[], compiler_flags:list&cflags&copts=[], out:str='', optional_outs:list=[],
                      linker_flags:list&ldflags&linkopts=[], deps:list=[], visibility:list=None,
                      test_only:bool&testonly=False, pkg_config_libs:list=[], pkg_config_cflags:list=[],_c=False, labels:list=[]):
    """Generates a C++ static library (.a).

    This is essentially just a collection of other cc_library rules into a single archive.
    Optionally this rule can have sources of its own, but it's quite reasonable just to use
    it as a collection of other rules.

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      deps (list): Dependent rules.
      out (str): Name of the output library. Defaults to lib<name>.a (or just <name>.a if name already
                       begins with 'lib').
      optional_outs (list): Name of optional outputs.
      visibility (list): Visibility declaration for this rule.
      test_only (bool): If True, is only available to other test rules.
      pkg_config_libs (list): Libraries to declare a dependency on using `pkg-config --libs`
      pkg_config_cflags (list): Libraries to declare a dependency on using `pkg-config --cflags`
      labels (list): Labels to attach to this rule.
    """
    log.fatal("cc_static_library not yet implemented.")



def cc_shared_object(name:str, srcs:list=[], hdrs:list=[], out:str='', optional_outs:list=[], compiler_flags:list&cflags&copts=[],
                     linker_flags:list&ldflags&linkopts=[], deps:list=[], visibility:list=None, test_only:bool&testonly=False,
                     pkg_config_libs:list=[], pkg_config_cflags:list=[], includes:list=[], _c=False, labels:list=[]):
    """Generates a C++ shared object (.so) with its dependencies linked in.

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files. These will be made available to dependent rules, so the distinction
                   between srcs and hdrs is important.
      out (str): Name of the output .so. Defaults to lib<name>.so (or just <name>.so if name already begins with 'lib').
      optional_outs (list): Name of optional outputs.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      test_only (bool): If True, is only available to other test rules.
      pkg_config_libs (list): Libraries to declare a dependency on using `pkg-config --libs`
      pkg_config_cflags (list): Libraries to declare a dependency on using `pkg-config --cflags`
      includes (list): Include directories to be added to the compiler's lookup path.
      labels (list): Labels to attach to this rule.
    """

    provides = {"cc": ":" + name}
    if(srcs or hdrs):
        libRule = cc_library(
            name=tag(name, "lib"),
            srcs = srcs,
            hdrs = hdrs,
            optional_outs = optional_outs,
            compiler_flags = compiler_flags,
            linker_flags = linker_flags,
            deps = deps,
            test_only = test_only,
            pkg_config_libs = pkg_config_libs,
            pkg_config_cflags = pkg_config_cflags,
            includes = includes
        )
        deps += [libRule]
        provides["cc_hdrs"] = ":" + tag(tag(name, "lib"), "hdrs")

    # Set output name if not given.
    if not out:
        out = f'{name}.so' if name.startswith('lib') else f'lib{name}.so'


    # Create actual link rule.
    linkRule = _generateLinkRule(name=tag(name, "bin") , out=out, deps=deps, flags=linker_flags, labels=labels, sharedLib=True)

    # Add include labels after the link rule, so that the link rule doesnt try to use non-existent includes.
    labels += ["cc:inc:" + package_name()]
    labels += ["cc:lib:" + join_path(get_base_path(), name)]

    # Wrap output in filegroup to provide missing flags and labels.
    fileRule = filegroup(
        name=name,
        srcs=[linkRule],
        test_only=test_only,
        deps=deps,
        visibility=visibility,
        requires=['cc', 'cc_hdrs'],
        provides=provides,
        labels=labels,
        output_is_complete=True
    )
    return(linkRule)


def cc_module(name:str, srcs:list=[], hdrs:list=[], interfaces:list=[], private_hdrs:list=[],
              deps:list=[], visibility:list=None, test_only:bool&testonly=False,
              compiler_flags:list&cflags&copts=[], linker_flags:list&ldflags&linkopts=[],
              pkg_config_libs:list=[], pkg_config_cflags:list=[], includes:list=[],
              defines:list|dict=[], alwayslink:bool=False, labels:list=[], optional_outs:list=[]):
    """Generate a C++ module.

    This is still experimental. Currently it has only been tested with clang; support for GCC
    will be added later once versions of GCC supporting modules are more conveniently available.

    Args:
      name (str): Name of the rule
      srcs (list): C++ source files to compile.
      hdrs (list): Header files. These will be made available to dependent rules, so the distinction
                   between srcs and hdrs is important.
      interfaces (list): Module interface files. Again, these are treated differently to `srcs` in
                         terms of compilation so the distinction is important.
      private_hdrs (list): Header files that are available only to this rule and not exported to
                           dependent rules.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      test_only (bool): If True, is only available to other test rules.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker; these will not be used here but will be
                           picked up by a cc_binary or cc_test rule.
      pkg_config_libs (list): Libraries to declare a dependency on using `pkg-config --libs`. Again, the ldflags
                              will be picked up by cc_binary or cc_test rules.
      pkg_config_cflags (list): Libraries to declare a dependency on using `pkg-config --cflags`. Again, the ldflags
                              will be picked up by cc_binary or cc_test rules.
      includes (list): List of include directories to be added to the compiler's path.
      defines (list | dict): List of tokens to define in the preprocessor.
                             Alternatively can be a dict of name -> value to define, in which case
                             values are surrounded by quotes.
      alwayslink (bool): If True, any binaries / tests using this library will link in all symbols,
                         even if they don't directly reference them. This is useful for e.g. having
                         static members that register themselves at construction time.
      linkstatic (bool): Only provided for Bazel compatibility. Has no actual effect.
      textual_hdrs (list): Also provided for Bazel compatibility. Effectively works the same as hdrs for now.
      labels (list): Labels to attach to this rule.
      optional_outs (list): Name of optional outputs.
    """
    log.fatal("cc_static_library not yet implemented.")

def cc_binary(name:str, srcs:list=[], hdrs:list=[], private_hdrs:list=[],
              compiler_flags:list&cflags&copts=[], linker_flags:list&ldflags&linkopts=[],
              deps:list=[], visibility:list=None, pkg_config_libs:list=[], includes:list=[], defines:list|dict=[],
              pkg_config_cflags:list=[], test_only:bool&testonly=False, static:bool=False, _c=False,
              linkstatic:bool=False, labels:list=[], optional_outs:list=[]):
    """Builds a binary from a collection of C++ rules.

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files.
      private_hdrs (list): Header files that are available only to this rule and not exported to
                           dependent rules.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      pkg_config_libs (list): Libraries to declare a dependency on using `pkg-config --libs`
      pkg_config_cflags (list): Libraries to declare a dependency on using `pkg-config --cflags`
      includes (list): List of include directories to be added to the compiler's path.
      defines (list | dict): List of tokens to define in the preprocessor.
                             Alternatively can be a dict of name -> value to define, in which case
                             values are surrounded by quotes.
      test_only (bool): If True, this rule can only be used by tests.
      static (bool): If True, the binary will be linked statically.
      linkstatic (bool): Only provided for Bazel compatibility. Has no actual effect since we always
                         link roughly equivalently to their "mostly-static" mode.
      labels (list): Labels to attach to this rule.
      optional_outs (list): Name of optional outputs.
    """

    # $TOOLS_CC" -o "$OUT" -Wl,--start-group `find . -name "*.o" -or -name "*.a" | sort` -Wl,--end-group -Wl,-L.,-lnodeGraph -Wl,-LnodeGraphRenderers/qtWidgetRenderer,-lqtWidgetRenderer -Wl,-lmysql-connector-cpp -Wl,-rpath,'$ORIGIN/subrepos/nodeGraph' -Wl,-rpath,'$ORIGIN/subrepos/nodeGraph/nodeGraphRenderers/qtWidgetRenderer' -Wl,-rpath,'$ORIGIN/subrepos/mysql-connector-cpp' -Wl,-lpthread,-ldl -Wl,--build-id=none -std=c++20 -Werror -Werror=suggest-override -Werror=return-type -Werror=non-virtual-dtor -Werror=catch-value -Wno-unused-variable -Wno-reorder -Wno-sign-compare -Wno-stringop-overflow -lpthread -s -O3 -fmax-errors=5  -Wl,-lpthread,-ldl -Wl,/usr/lib64/libQt6Charts.so -Wl,/usr/lib64/libQt6Core.so -Wl,/usr/lib64/libQt6Gui.so -Wl,/usr/lib64/libQt6Widgets.so

    # Compile any headers or sources into a library first.
    if(srcs or hdrs):
        libRule = cc_library(
            name=tag(name, "lib"),
            srcs = srcs,
            hdrs = hdrs,
            optional_outs = optional_outs,
            compiler_flags = compiler_flags,
            linker_flags = linker_flags,
            deps = deps,
            test_only = test_only,
            pkg_config_libs = pkg_config_libs,
            pkg_config_cflags = pkg_config_cflags,
            includes = includes
        )
        deps += [libRule]

    linkRule = _generateLinkRule(name=tag(name, "bin"), out=name, deps=deps, flags=linker_flags, sharedLib=False)
    
    fileRule = filegroup(
        name=name,
        srcs=[linkRule],
        test_only=test_only,
        visibility=visibility,
        output_is_complete=True,
        binary=True
    )
    return(fileRule)

def cc_test(name:str, srcs:list=[], hdrs:list=[], compiler_flags:list&cflags&copts=[],
            linker_flags:list&ldflags&linkopts=[], pkg_config_libs:list=[],
            pkg_config_cflags:list=[], deps:list=[], worker:str='', data:list|dict=[],
            visibility:list=[], flags:str='', labels:list&features&tags=[], flaky:bool|int=0,
            test_outputs:list=[], size:str=None, timeout:int=0,
            sandbox:bool=None, write_main:bool=False, linkstatic:bool=False, _c=False):
    """Defines a C++ test.

    We template in a main file so you don't have to supply your own.
    (Later we might allow that to be configured to help support other unit test frameworks).

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      pkg_config_libs (list): Libraries to declare a dependency on using `pkg-config --libs`
      pkg_config_cflags (list): Libraries to declare a dependency on using `pkg-config --cflags`
      deps (list): Dependent rules.
      worker (str): Reference to worker script, A persistent worker process that is used to set up the test.
      data (list): Runtime data files for this test.
      visibility (list): Visibility declaration for this rule.
      flags (str): Flags to apply to the test invocation.
      labels (list): Labels to attach to this test.
      flaky (bool | int): If true the test will be marked as flaky and automatically retried.
      test_outputs (list): Extra test output files to generate from this test.
      size (str): Test size (enormous, large, medium or small).
      timeout (int): Length of time in seconds to allow the test to run for before killing it.
      sandbox (bool): Sandbox the test on Linux to restrict access to namespaces such as network.
      write_main (bool): Deprecated, has no effect. See `plz help testmain` for more information
                         about how to define a default dependency for the test main.
      linkstatic (bool): Only provided for Bazel compatibility. Has no actual effect since we always
                         link roughly equivalently to their "mostly-static" mode.
    """
    log.fatal("cc_test not yet implemented.")
